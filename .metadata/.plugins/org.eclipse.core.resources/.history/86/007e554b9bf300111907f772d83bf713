package saveTheLolipop.moteurGraphique.donneesAffichage;

import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.newdawn.slick.Color;
import org.newdawn.slick.opengl.Texture;

import saveTheLolipop.moteur.element.Actifs;
import saveTheLolipop.moteur.utilitaire.Coordonnees;
import saveTheLolipop.moteurGraphique.donneesAffichage.utilitaire.EnumDirection;
import saveTheLolipop.moteurGraphique.donneesAffichage.utilitaire.Formes;
import saveTheLolipop.moteurGraphique.donneesAffichage.utilitaire.ImageChargeur;

public class Affichages {
	private static Coordonnees lastCoord = new Coordonnees();
	private static Integer codeTextureAnimation = 110;
	
	public static void animationMarche(int codeType, Coordonnees coord) {
		int codeTextureDirection = orientationVision(codeType, coord);
		if (lastCoord.distance(coord) >= 20) {
			System.out.println("distance dépacer");
//			Integer codeAnimation;
//			if (codeTextureAnimation != 90) {
//				codeAnimation = codeTextureAnimation - codeTextureDirection;
//			} else {
//				codeAnimation = 0;
//			}
//			System.out.println("codeAnimation : " + codeAnimation);
			System.out.println((codeTextureAnimation - codeTextureDirection));
			codeTextureAnimation = (int) (codeTextureDirection + ((codeTextureAnimation - codeTextureDirection + 1) % 3));
			lastCoord.vauxLaValeur(coord);
		}
		System.out.println("nb images a affiche : " + codeTextureAnimation);
	 	Texture texture = ImageChargeur.getTexture(codeTextureAnimation);
		if (texture == null) {
			texture = ImageChargeur.getTexture(90);
		}
		Color.white.bind();
		texture.bind();
		Formes.rectangle(texture.getTextureWidth(), texture.getTextureHeight(),coord);
	}
	
	public static void Immobile(Actifs actif) {
		int code = actif.getApparence().code();
		Coordonnees coord = actif.getCoord();
		int codeTextureDirection = orientationVision(code, coord);
		Texture texture = ImageChargeur.getTexture(codeTextureDirection);
		if (texture == null) {
			texture = ImageChargeur.getTexture(90);
		}
		Color.white.bind();
		texture.bind();
		Formes.rectangle(texture.getTextureWidth(), texture.getTextureHeight(),coord);
	}
	private static int orientationVision(int codeType, Coordonnees coord) {
		Float sourisCorrectionY = Display.getHeight() - (float) Mouse.getY();
		Coordonnees coordSouris = new Coordonnees((float) Mouse.getX(), sourisCorrectionY);
		
		EnumDirection directionVision = coord.comparePosition(coordSouris);
		int codeAffichage = 100 * codeType + 10 * directionVision.code();
		return codeAffichage;
	}
}
